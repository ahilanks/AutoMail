import pandas as pd
import fitz
import google.generativeai as genai
import anthropic
import requests

client = anthropic.Anthropic(
    # Replace with your API-KEY
    api_key="",
)

# Replace with your file path for list of people and your resume/details of organization
people = pd.read_csv('/Users/ahilankaruppusami/Downloads/Mail Merge Test - Sheet1.csv')
resume_path = "/Users/ahilankaruppusami/Downloads/Karuppusami_Ahilan--Resume.pdf"

# Extract resume_text from all pages
with fitz.open(resume_path) as doc:
    resume_text = ''.join(page.get_text() for page in doc)

# Function to split names correctly into FirstName and LastName
def split_name(name):
    parts = name.split()  # Split by spaces
    first_name = parts[0]  # First part is the first name
    last_name = ' '.join(parts[1:]) if len(parts) > 1 else ''  # Join remaining parts as last name
    return pd.Series([first_name, last_name])

def findEmail(people):
    # Split 'Name' into 'FirstName' and 'LastName'
    people[['FirstName', 'LastName']] = people['Name'].apply(split_name)

    # Initialize a list to store emails
    emails = []
    confidences = []
    # Iterate through the DataFrame rows
    url = "https://api.hunter.io/v2/email-finder"
    for i, row in people.iterrows():
        # Call the Hunter API to find the email
        
        params = {
            "domain": row['Company'].replace(" ", "").lower() + ".com",
            "first_name": row['FirstName'],
            "last_name": row['LastName'],
            "api_key": "5449b736ce1b907212212856e16365e33fff5699"
        }
        response = requests.get(url, params=params)

        # If the request is successful, extract the email; else generate a fallback email
        if response.status_code == 200 and response.json().get("data"):
            print("Got Right Email!")
            email = response.json()["data"].get("email", None)
            confidence = response.json()["data"].get("score", None)
        else:
            # Fallback email generation if API fails
            print(f"Could not get Email because {response.status_code}!")
            email = f"{row['FirstName']}.{row['LastName']}@{row['Company'].replace(' ', '').lower()}.com"
            confidence = 0

        emails.append(email)
        confidences.append(confidence)

    # Add the emails to the DataFrame
    people['Emails'] = emails
    people["Email Confidence"] = confidences

    people.drop("FirstName", axis = 1)
    people.drop("LastName", axis = 1)

def writeEmail(df): 
    emails = []
    for _, person in df.iterrows():
        prompt = f"""
        Generate a personalized email requesting a chat with:
        
        Recipient: {person.to_dict()}
        
        Using relevant details from this resume:
        {resume_text}
        
        The email should be professional, concise, and highlight relevant connections 
        between the resume and the recipient's background or company. Do not include any 
        brackets or fill in the blanks. Instead assume something specific based on the background 
        of the person(you should search this up) and the on the interests of the resume.

        Do not include the Subject line.

        Start with Hi <Name>,
        """
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=8000,
            messages=[
                {"role": "user", "content": f"{prompt}"}
            ]
        )
        emails.append(response.content[0].text)

    df['Email Content'] = emails

findEmail(people)
#writeEmail(people)

people.to_excel("/Users/ahilankaruppusami/Coding_Projects/Mail Merging/Spreadsheets/my_data.xlsx", index=False)